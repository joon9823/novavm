  use crate::error::GoError;
  use crate::memory::{U8SliceView, UnmanagedVector};

  // this represents something passed in from the caller side of FFI
  // in this case a struct with go function pointers
  #[repr(C)]
>>pub struct api_t {
      _private: [u8; 0],
  }

  // These functions should return GoError but because we don't trust them here, we treat the return value as i32
  // and then check it when converting to GoError manually
  #[repr(C)]
  #[derive(Copy, Clone)]
>>pub struct GoApi_vtable {
      pub humanize_address: extern "C" fn(
          *const api_t,
          U8SliceView,
          *mut UnmanagedVector, // human output
          *mut UnmanagedVector, // error message output
          *mut u64,
      ) -> i32,
      pub canonicalize_address: extern "C" fn(
          *const api_t,
          U8SliceView,
          *mut UnmanagedVector, // canonical output
          *mut UnmanagedVector, // error message output
          *mut u64,
      ) -> i32,
  }

  #[repr(C)]
  #[derive(Copy, Clone)]
  pub struct GoApi {
      pub state: *const api_t,
      pub vtable: GoApi_vtable,
  }
